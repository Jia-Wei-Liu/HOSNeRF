category: 'human_nerf'


##############################################3
## Network Specs

# modules
network_module: 'core.nets.human_nerf.network'
optimizer_module: 'core.train.optimizers.human_nerf.optimizer'

# positional embedder -- canonical mlp
embedder:
  module: "core.nets.human_nerf.embedders.fourier"

# positional embedder -- non-rigid motion mlp
non_rigid_embedder:
  module: "core.nets.human_nerf.embedders.hannw_fourier"

# basedir for dataset path: to get the time transitions
basedir: 'Path to the dataset'  

# canonical mlp
canonical_mlp:
  module: 'core.nets.human_nerf.canonical_mlps.mlp_rgb_sigma'
  mlp_depth: 8         # layers in network
  mlp_width: 256       # channels per layer
  multires: 10         # log2 of max freq for positional encoding (3D location)
  i_embed: 0           # set 0 for default positional encoding, -1 for none

# motion weights volume
mweight_volume:
  module: 'core.nets.human_nerf.mweight_vol_decoders.deconv_vol_decoder'
  embedding_size: 256
  volume_size: 32
  dst_voxel_size: 0.0625

# non-rigid motion mlp
non_rigid_motion_mlp:
  module: 'core.nets.human_nerf.non_rigid_motion_mlps.mlp_offset'
  condition_code_size: 75
  mlp_width: 128
  mlp_depth: 6
  skips: [4]
  multires: 6       # log2 of max freq for positional encoding (3D location)
  i_embed: 0        # set 0 for default positional encoding, -1 for none
  kick_in_iter: 0
  full_band_iter: 0

# non-rigid forward mlp
non_rigid_forward_mlp:
  module: 'core.nets.human_nerf.non_rigid_motion_mlps.mlp_forward_offset'
  condition_code_size: 75
  mlp_width: 128
  mlp_depth: 6
  skips: [4]
  multires: 6       # log2 of max freq for positional encoding (3D location)
  i_embed: 0        # set 0 for default positional encoding, -1 for none
  kick_in_iter: 0   #10000
  full_band_iter: 0      

# pose decoder
pose_decoder:
  module: 'core.nets.human_nerf.pose_decoders.mlp_delta_body_pose'
  embedding_size: 75
  mlp_width: 256
  mlp_depth: 4


##############################################3
## Data Configuration

train_keyfilter: ['rays', 'target_rgbs',
                  'motion_bases', 'motion_weights_priors',
                  'cnl_bbox', 'dst_posevec_75']
test_keyfilter: ['rays', 'target_rgbs', 
                 'motion_bases', 'motion_weights_priors',
                  'cnl_bbox', 'dst_posevec_75']

train:
  perturb: 1.        # only for training, set to 0. for no jitter, 1. for jitter
  batch_size: 1
  shuffle: True
  drop_last: False
  maxiter: 200000
  lr_cnl_mlp: 0.00006667 
  lr_human_stateembeds: 0.00006667 
  lr_mweight_vol_decoder: 0.000006667 
  lr_pose_decoder: 0.000006667        
  lr_non_rigid_mlp: 0.000006667       
  lr_non_rigid_forward_mlp: 0.000006667        
  lr_bkgd: 0.00006667     
  lrate_decay: 500
  optimizer: 'adam'
  log_interval: 20
  save_checkpt_interval: 2000
  save_model_interval: 50000
  ray_shoot_mode: 'patch'
  lossweights:
    lpips: 1.0
    mse: 0.2
    flow: 0.01
    cycle: 0.01            


progress:
  batch_size: 1
  shuffle: False
  drop_last: False
  dump_interval: 5000

movement:
  batch_size: 1
  shuffle: False
  drop_last: False

test:
  batch_size: 1
  shuffle: False
  drop_last: False  

freeview:
  batch_size: 1
  shuffle: False
  drop_last: False
  frame_idx: 119

tpose:
  batch_size: 1
  shuffle: False
  drop_last: False


##############################################3
## Misc

sex: 'neutral'
total_bones: 26
bbox_offset: 0.6

load_net: latest
save_all: True    # save all checkpoints

patch:
  sample_subject_ratio: 0.8
  N_patches: 2
  size: 32      # [Patch] size of patch

N_samples: 128      # number of samples for each ray in coarse ray matching

perturb: 1.        # only for training, set to 0. for no jitter, 1. for jitter

netchunk_per_gpu: 10000 # number of pts sent through network in parallel, decrease if running out of memory
chunk: 8192   # 32768=1024*32, number of rays processed in parallel, decrease if running out of memory
chunk_bkg: 8192   # number of rays processed in parallel, decrease if running out of memory
n_gpus: 1

show_alpha: False  
show_truth: False
